ПРИ ДОДЕЛКЕ ДАННОЙ БИБЛИОТЕКИ СТАРАЮСЬ ИСПОЛЬЗОВАТЬ СУЩЕСТВУЮЩИЙ КОД, А НЕ ПИСАТЬ НОВЫЙ! В ОСНОВНОМ, ВСЕ ЧТО НУЖНО ДОБАВИТЬ ИЛИ ЕСТЬ СОВОКУПНОСТЬ СУЩЕСТВУЮЩИХ МЕТОДОВ БИБЛИОТЕКИ С ОПРЕДЕЛЕННЫМИ ПАРАМЕТРАМИ, ИЛИ ЖЕ ЧАСТО ИСПОЛЬЗУЕМЫЙ КОД ИЗ RockCarrier - ИГРЫ НА ОСНОВЕ ДВИЖКА.

(x)VisObj::UseExistingFrameTable: в случае неправильного индекса метод совершает ошибку vector<T> subscript error - своя какая-то,
проверок лишних не добавляю - долго будет работать
(x)VisObj::AddBMPFrameTable: добавлена поддержка изображений с обратным расположением цветов, правда и отображаются они наоборот :). Так что не рекоммендуются
Идея движка такова, что параметры, передаваемые в один из методов должны быть правильны, иначе чаще всего будет ошибка. О требованиях к параметрам - чит. мануал.
(x)Добавлен IAnim::UseExistingFrameTableAsLinearAnim(int nFrameOrAngledTable);
Draw теперь добавляет ссылку на прорисовку данного объекта (Draw(false) - убирает) и не нужно его вызывать в конце каждого кадра
(x)CalculateSpeed() & Move() вызываются автоматически каждый кадр
каждый метод в IDL теперь снабжен helpstring с кратким описанием, набор всех описаний есть в мануале
Добавим возможность обработки событий. На плечи самой библиотеки возложить обеспечение связи событие-обработчик, а вернее сигнал-слот (более общая технология, буду ее использовать) не получится, т.к. в компоненту нельзя передать функцию через аппарат параметров метода интерфейса. Т.о. обработка сигналов будет реализовываться в прилагаемом файле. Пусть он будет идти отдельно от izobj.h для удобства понимания, сопровождения и логической замкнутости. Реализация механизма нужна, и в каком-то виде всегда присутствует в больших проектах. Поэтому, когда будет большой проект - сделаю.

